/* -*- sv -*- File generated by the BNF Converter (bnfc 2.9.6). */

/*******************************************************/
/* This implements the common visitor design pattern.
   Note that this method uses Visitor-traversal of lists, so
   List->accept() does NOT traverse the list. This allows different
   algorithms to use context information differently. */

`include "Interp.svh"


task Interp::visitProgram(Program p); endtask //abstract class
task Interp::visitStmt_Item(Stmt_Item p); endtask //abstract class
task Interp::visitVar_Assignment(Var_Assignment p); endtask //abstract class
task Interp::visitJump_Stmt(Jump_Stmt p); endtask //abstract class
task Interp::visitFuncOrProcCall(FuncOrProcCall p); endtask //abstract class
task Interp::visitBuiltin_Task(Builtin_Task p); endtask //abstract class
task Interp::visitBuiltin_Fn(Builtin_Fn p); endtask //abstract class
task Interp::visitBar(Bar p); endtask //abstract class
task Interp::visitPrint_Arg(Print_Arg p); endtask //abstract class
task Interp::visitProc_Definition(Proc_Definition p); endtask //abstract class
task Interp::visitFunc_Definition(Func_Definition p); endtask //abstract class
task Interp::visitDefinition(Definition p); endtask //abstract class
task Interp::visitFormal_Arg(Formal_Arg p); endtask //abstract class
task Interp::visitElse_If(Else_If p); endtask //abstract class
task Interp::visitElse_Opt(Else_Opt p); endtask //abstract class
task Interp::visitConditional_Stmt(Conditional_Stmt p); endtask //abstract class
task Interp::visitLoop_Stmt(Loop_Stmt p); endtask //abstract class
task Interp::visitFor_Init_Opt(For_Init_Opt p); endtask //abstract class
task Interp::visitExpr_Opt(Expr_Opt p); endtask //abstract class
task Interp::visitFor_Step_Opt(For_Step_Opt p); endtask //abstract class
task Interp::visitOp(Op p); endtask //abstract class
task Interp::visitExpr(Expr p); endtask //abstract class
task Interp::visitPrimary(Primary p); endtask //abstract class
task Interp::visitRange_Expr_Opt(Range_Expr_Opt p); endtask //abstract class
task Interp::visitRange_Expr(Range_Expr p); endtask //abstract class
task Interp::visitUnary_Operator(Unary_Operator p); endtask //abstract class
task Interp::visitInc_Or_Dec_Operator(Inc_Or_Dec_Operator p); endtask //abstract class
task Interp::visitNumber(Number p); endtask //abstract class
task Interp::visitString_Literal(String_Literal p); endtask //abstract class

task Interp::visitProgram1(Program1 p);
  /* Code For Program1 Goes Here */

  p.liststmt_item_.accept(this);

endtask

task Interp::visitVarDeclStmt(VarDeclStmt p);
  /* Code For VarDeclStmt Goes Here */

  visitIdent(p.ident_);

endtask

task Interp::visitVarAssDeclStmt(VarAssDeclStmt p);
  /* Code For VarAssDeclStmt Goes Here */

  p.var_assignment_.accept(this);

endtask

task Interp::visitAssignmentStmt(AssignmentStmt p);
  /* Code For AssignmentStmt Goes Here */

  p.var_assignment_.accept(this);

endtask

task Interp::visitConditionalStmt(ConditionalStmt p);
  /* Code For ConditionalStmt Goes Here */

  p.conditional_stmt_.accept(this);

endtask

task Interp::visitIncDecOpStmt(IncDecOpStmt p);
  /* Code For IncDecOpStmt Goes Here */

  visitIdent(p.ident_);
  p.inc_or_dec_operator_.accept(this);

endtask

task Interp::visitLoopStmt(LoopStmt p);
  /* Code For LoopStmt Goes Here */

  p.loop_stmt_.accept(this);

endtask

task Interp::visitJumpStmt(JumpStmt p);
  /* Code For JumpStmt Goes Here */

  p.jump_stmt_.accept(this);

endtask

task Interp::visitBlockStmt(BlockStmt p);
  /* Code For BlockStmt Goes Here */

  p.liststmt_item_.accept(this);

endtask

task Interp::visitBuiltInStmt(BuiltInStmt p);
  /* Code For BuiltInStmt Goes Here */

  p.builtin_task_.accept(this);

endtask

task Interp::visitProcDefStmt(ProcDefStmt p);
  /* Code For ProcDefStmt Goes Here */

  p.proc_definition_.accept(this);

endtask

task Interp::visitFuncDefStmt(FuncDefStmt p);
  /* Code For FuncDefStmt Goes Here */

  p.func_definition_.accept(this);

endtask

task Interp::visitProcCallStmt(ProcCallStmt p);
  /* Code For ProcCallStmt Goes Here */

  p.funcorproccall_.accept(this);

endtask

task Interp::visitAssignment(Assignment p);
  /* Code For Assignment Goes Here */

  visitIdent(p.ident_);
  p.range_expr_opt_.accept(this);
  p.expr_.accept(this);

endtask

task Interp::visitBreak(Break p);
  /* Code For Break Goes Here */


endtask

task Interp::visitContinue(Continue p);
  /* Code For Continue Goes Here */


endtask

task Interp::visitReturn(Return p);
  /* Code For Return Goes Here */

  p.expr_opt_.accept(this);

endtask

task Interp::visitCall(Call p);
  /* Code For Call Goes Here */

  visitIdent(p.ident_);
  p.listexpr_.accept(this);

endtask

task Interp::visitPrint(Print p);
  /* Code For Print Goes Here */

  p.listprint_arg_.accept(this);

endtask

task Interp::visitRegWr(RegWr p);
  /* Code For RegWr Goes Here */

  p.bar_.accept(this);
  p.expr_1.accept(this);
  p.expr_2.accept(this);

endtask

task Interp::visitWait(Wait p);
  /* Code For Wait Goes Here */

  p.expr_.accept(this);

endtask

task Interp::visitFatal(Fatal p);
  /* Code For Fatal Goes Here */

  p.expr_.accept(this);

endtask

task Interp::visitRegRd(RegRd p);
  /* Code For RegRd Goes Here */

  p.bar_.accept(this);
  p.expr_.accept(this);

endtask

task Interp::visitWaitInterrupt(WaitInterrupt p);
  /* Code For WaitInterrupt Goes Here */

  p.listexpr_.accept(this);
  p.expr_.accept(this);

endtask

task Interp::visitCeil(Ceil p);
  /* Code For Ceil Goes Here */

  p.expr_.accept(this);

endtask

task Interp::visitFloor(Floor p);
  /* Code For Floor Goes Here */

  p.expr_.accept(this);

endtask

task Interp::visitLog2(Log2 p);
  /* Code For Log2 Goes Here */

  p.expr_.accept(this);

endtask

task Interp::visitSys(Sys p);
  /* Code For Sys Goes Here */

  p.string_literal_.accept(this);

endtask

task Interp::visitIsDefd(IsDefd p);
  /* Code For IsDefd Goes Here */

  visitIdent(p.ident_);

endtask

task Interp::visitBar_(Bar_ p);
  /* Code For Bar_ Goes Here */

  p.expr_.accept(this);

endtask

task Interp::visitPrExpr(PrExpr p);
  /* Code For PrExpr Goes Here */

  p.expr_.accept(this);

endtask

task Interp::visitPrString(PrString p);
  /* Code For PrString Goes Here */

  p.string_literal_.accept(this);

endtask

task Interp::visitPrHex(PrHex p);
  /* Code For PrHex Goes Here */

  p.expr_.accept(this);

endtask

task Interp::visitPrBin(PrBin p);
  /* Code For PrBin Goes Here */

  p.expr_.accept(this);

endtask

task Interp::visitProcDef(ProcDef p);
  /* Code For ProcDef Goes Here */

  p.definition_.accept(this);

endtask

task Interp::visitFuncDef(FuncDef p);
  /* Code For FuncDef Goes Here */

  p.definition_.accept(this);

endtask

task Interp::visitDefn(Defn p);
  /* Code For Defn Goes Here */

  visitIdent(p.ident_);
  p.listformal_arg_.accept(this);
  p.stmt_item_.accept(this);

endtask

task Interp::visitFormal(Formal p);
  /* Code For Formal Goes Here */

  visitIdent(p.ident_);

endtask

task Interp::visitElsIf(ElsIf p);
  /* Code For ElsIf Goes Here */

  p.expr_.accept(this);
  p.stmt_item_.accept(this);

endtask

task Interp::visitElseIsEmpty(ElseIsEmpty p);
  /* Code For ElseIsEmpty Goes Here */


endtask

task Interp::visitElseIsElse(ElseIsElse p);
  /* Code For ElseIsElse Goes Here */

  p.stmt_item_.accept(this);

endtask

task Interp::visitIf(If p);
  /* Code For If Goes Here */

  p.expr_.accept(this);
  p.stmt_item_.accept(this);
  p.listelse_if_.accept(this);
  p.else_opt_.accept(this);

endtask

task Interp::visitWhile(While p);
  /* Code For While Goes Here */

  p.expr_.accept(this);
  p.stmt_item_.accept(this);

endtask

task Interp::visitFor(For p);
  /* Code For For Goes Here */

  p.for_init_opt_.accept(this);
  p.expr_opt_.accept(this);
  p.for_step_opt_.accept(this);
  p.stmt_item_.accept(this);

endtask

task Interp::visitForInitIsEmpty(ForInitIsEmpty p);
  /* Code For ForInitIsEmpty Goes Here */


endtask

task Interp::visitForInitIsInit(ForInitIsInit p);
  /* Code For ForInitIsInit Goes Here */

  p.var_assignment_.accept(this);

endtask

task Interp::visitForInitIsVarInit(ForInitIsVarInit p);
  /* Code For ForInitIsVarInit Goes Here */

  p.var_assignment_.accept(this);

endtask

task Interp::visitExprIsEmpty(ExprIsEmpty p);
  /* Code For ExprIsEmpty Goes Here */


endtask

task Interp::visitExprIsExpr(ExprIsExpr p);
  /* Code For ExprIsExpr Goes Here */

  p.expr_.accept(this);

endtask

task Interp::visitForStepIsEmpty(ForStepIsEmpty p);
  /* Code For ForStepIsEmpty Goes Here */


endtask

task Interp::visitForStepIsAssignment(ForStepIsAssignment p);
  /* Code For ForStepIsAssignment Goes Here */

  p.var_assignment_.accept(this);

endtask

task Interp::visitForStepIsIncOrDec(ForStepIsIncOrDec p);
  /* Code For ForStepIsIncOrDec Goes Here */

  visitIdent(p.ident_);
  p.inc_or_dec_operator_.accept(this);

endtask

task Interp::visitPow(Pow p);
  /* Code For Pow Goes Here */


endtask

task Interp::visitMul(Mul p);
  /* Code For Mul Goes Here */


endtask

task Interp::visitDiv(Div p);
  /* Code For Div Goes Here */


endtask

task Interp::visitMod(Mod p);
  /* Code For Mod Goes Here */


endtask

task Interp::visitAdd(Add p);
  /* Code For Add Goes Here */


endtask

task Interp::visitSub(Sub p);
  /* Code For Sub Goes Here */


endtask

task Interp::visitLAnd(LAnd p);
  /* Code For LAnd Goes Here */


endtask

task Interp::visitXor(Xor p);
  /* Code For Xor Goes Here */


endtask

task Interp::visitLOr(LOr p);
  /* Code For LOr Goes Here */


endtask

task Interp::visitRsh(Rsh p);
  /* Code For Rsh Goes Here */


endtask

task Interp::visitLsh(Lsh p);
  /* Code For Lsh Goes Here */


endtask

task Interp::visitLt(Lt p);
  /* Code For Lt Goes Here */


endtask

task Interp::visitLeq(Leq p);
  /* Code For Leq Goes Here */


endtask

task Interp::visitGt(Gt p);
  /* Code For Gt Goes Here */


endtask

task Interp::visitGeq(Geq p);
  /* Code For Geq Goes Here */


endtask

task Interp::visitEq(Eq p);
  /* Code For Eq Goes Here */


endtask

task Interp::visitNeq(Neq p);
  /* Code For Neq Goes Here */


endtask

task Interp::visitAnd(And p);
  /* Code For And Goes Here */


endtask

task Interp::visitOr(Or p);
  /* Code For Or Goes Here */


endtask

task Interp::visitExprPrim(ExprPrim p);
  /* Code For ExprPrim Goes Here */

  p.primary_.accept(this);

endtask

task Interp::visitExprUnary(ExprUnary p);
  /* Code For ExprUnary Goes Here */

  p.unary_operator_.accept(this);
  p.expr_.accept(this);

endtask

task Interp::visitExprBltin(ExprBltin p);
  /* Code For ExprBltin Goes Here */

  p.builtin_fn_.accept(this);

endtask

task Interp::visitExprFuncCall(ExprFuncCall p);
  /* Code For ExprFuncCall Goes Here */

  p.funcorproccall_.accept(this);

endtask

task Interp::visitExprTernary(ExprTernary p);
  /* Code For ExprTernary Goes Here */

  p.expr_1.accept(this);
  p.expr_2.accept(this);
  p.expr_3.accept(this);

endtask

task Interp::visitEOp(EOp p);
  /* Code For EOp Goes Here */

  p.expr_1.accept(this);
  p.op_.accept(this);
  p.expr_2.accept(this);

endtask

task Interp::visitPrimIdent(PrimIdent p);
  /* Code For PrimIdent Goes Here */

  visitIdent(p.ident_);
  p.range_expr_opt_.accept(this);

endtask

task Interp::visitPrimNumber(PrimNumber p);
  /* Code For PrimNumber Goes Here */

  p.number_.accept(this);

endtask

task Interp::visitRangeExprIsEmpty(RangeExprIsEmpty p);
  /* Code For RangeExprIsEmpty Goes Here */


endtask

task Interp::visitRangeExprIsRange(RangeExprIsRange p);
  /* Code For RangeExprIsRange Goes Here */

  p.range_expr_.accept(this);

endtask

task Interp::visitRangeExprBit(RangeExprBit p);
  /* Code For RangeExprBit Goes Here */

  p.expr_.accept(this);

endtask

task Interp::visitRangeExprRange(RangeExprRange p);
  /* Code For RangeExprRange Goes Here */

  p.expr_1.accept(this);
  p.expr_2.accept(this);

endtask

task Interp::visitUnaryPlus(UnaryPlus p);
  /* Code For UnaryPlus Goes Here */


endtask

task Interp::visitUnaryMinus(UnaryMinus p);
  /* Code For UnaryMinus Goes Here */


endtask

task Interp::visitUnaryNot(UnaryNot p);
  /* Code For UnaryNot Goes Here */


endtask

task Interp::visitUnaryComp(UnaryComp p);
  /* Code For UnaryComp Goes Here */


endtask

task Interp::visitIncr(Incr p);
  /* Code For Incr Goes Here */


endtask

task Interp::visitDecr(Decr p);
  /* Code For Decr Goes Here */


endtask

task Interp::visitDecimal(Decimal p);
  /* Code For Decimal Goes Here */

  visitDecimal_Number(p.decimal_number_);

endtask

task Interp::visitBinary(Binary p);
  /* Code For Binary Goes Here */

  visitBinaryNumber(p.binarynumber_);

endtask

task Interp::visitHex(Hex p);
  /* Code For Hex Goes Here */

  visitHexNumber(p.hexnumber_);

endtask

task Interp::visitReal(Real p);
  /* Code For Real Goes Here */

  visitReal_Number(p.real_number_);

endtask

task Interp::visitStringLit(StringLit p);
  /* Code For StringLit Goes Here */

  visitAnyChars(p.anychars_);

endtask


task Interp::visitListStmt_Item(ListStmt_Item  liststmt_item);
  for ( int i = 0; i < liststmt_item.v.size() ; i++)
  begin
    liststmt_item.v[i].accept(this);
  end
endtask

task Interp::visitListExpr(ListExpr  listexpr);
  for ( int i = 0; i < listexpr.v.size() ; i++)
  begin
    listexpr.v[i].accept(this);
  end
endtask

task Interp::visitListPrint_Arg(ListPrint_Arg  listprint_arg);
  for ( int i = 0; i < listprint_arg.v.size() ; i++)
  begin
    listprint_arg.v[i].accept(this);
  end
endtask

task Interp::visitListFormal_Arg(ListFormal_Arg  listformal_arg);
  for ( int i = 0; i < listformal_arg.v.size() ; i++)
  begin
    listformal_arg.v[i].accept(this);
  end
endtask

task Interp::visitListElse_If(ListElse_If  listelse_if);
  for ( int i = 0; i < listelse_if.v.size() ; i++)
  begin
    listelse_if.v[i].accept(this);
  end
endtask


task Interp::visitDecimal_Number(Decimal_Number x);
  /* Code for Decimal_Number Goes Here */
endtask

task Interp::visitReal_Number(Real_Number x);
  /* Code for Real_Number Goes Here */
endtask

task Interp::visitBinaryNumber(BinaryNumber x);
  /* Code for BinaryNumber Goes Here */
endtask

task Interp::visitHexNumber(HexNumber x);
  /* Code for HexNumber Goes Here */
endtask

task Interp::visitAnyChars(AnyChars x);
  /* Code for AnyChars Goes Here */
endtask

task Interp::visitInteger(Integer x);
  /* Code for Integer Goes Here */
endtask

task Interp::visitChar(Char x);
  /* Code for Char Goes Here */
endtask

task Interp::visitDouble(Double x);
  /* Code for Double Goes Here */
endtask

task Interp::visitString(String x);
  /* Code for String Goes Here */
endtask

task Interp::visitIdent(Ident x);
  /* Code for Ident Goes Here */
endtask



