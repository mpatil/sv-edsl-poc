/* -*- sv -*- File generated by the BNF Converter (bnfc 2.9.6). */

`ifndef ABSYN_SV
`define ABSYN_SV
`include "Absyn.svh"

/********************   Program1    ********************/
function Program1::new(ListStmt_Item p1);
  liststmt_item_ = p1;

endfunction

task Program1::accept(Visitor v);
  v.visitProgram1(this);
endtask



/********************   VarDeclStmt    ********************/
function VarDeclStmt::new(Ident p1);
  ident_ = p1;

endfunction

task VarDeclStmt::accept(Visitor v);
  v.visitVarDeclStmt(this);
endtask



/********************   VarAssDeclStmt    ********************/
function VarAssDeclStmt::new(Var_Assignment p1);
  var_assignment_ = p1;

endfunction

task VarAssDeclStmt::accept(Visitor v);
  v.visitVarAssDeclStmt(this);
endtask



/********************   AssignmentStmt    ********************/
function AssignmentStmt::new(Var_Assignment p1);
  var_assignment_ = p1;

endfunction

task AssignmentStmt::accept(Visitor v);
  v.visitAssignmentStmt(this);
endtask



/********************   ConditionalStmt    ********************/
function ConditionalStmt::new(Conditional_Stmt p1);
  conditional_stmt_ = p1;

endfunction

task ConditionalStmt::accept(Visitor v);
  v.visitConditionalStmt(this);
endtask



/********************   IncDecOpStmt    ********************/
function IncDecOpStmt::new(Ident p1, Inc_Or_Dec_Operator p2);
  ident_ = p1;
  inc_or_dec_operator_ = p2;

endfunction

task IncDecOpStmt::accept(Visitor v);
  v.visitIncDecOpStmt(this);
endtask



/********************   LoopStmt    ********************/
function LoopStmt::new(Loop_Stmt p1);
  loop_stmt_ = p1;

endfunction

task LoopStmt::accept(Visitor v);
  v.visitLoopStmt(this);
endtask



/********************   JumpStmt    ********************/
function JumpStmt::new(Jump_Stmt p1);
  jump_stmt_ = p1;

endfunction

task JumpStmt::accept(Visitor v);
  v.visitJumpStmt(this);
endtask



/********************   BlockStmt    ********************/
function BlockStmt::new(ListStmt_Item p1);
  liststmt_item_ = p1;

endfunction

task BlockStmt::accept(Visitor v);
  v.visitBlockStmt(this);
endtask



/********************   BuiltInStmt    ********************/
function BuiltInStmt::new(Builtin_Task p1);
  builtin_task_ = p1;

endfunction

task BuiltInStmt::accept(Visitor v);
  v.visitBuiltInStmt(this);
endtask



/********************   ProcDefStmt    ********************/
function ProcDefStmt::new(Proc_Definition p1);
  proc_definition_ = p1;

endfunction

task ProcDefStmt::accept(Visitor v);
  v.visitProcDefStmt(this);
endtask



/********************   FuncDefStmt    ********************/
function FuncDefStmt::new(Func_Definition p1);
  func_definition_ = p1;

endfunction

task FuncDefStmt::accept(Visitor v);
  v.visitFuncDefStmt(this);
endtask



/********************   ProcCallStmt    ********************/
function ProcCallStmt::new(FuncOrProcCall p1);
  funcorproccall_ = p1;

endfunction

task ProcCallStmt::accept(Visitor v);
  v.visitProcCallStmt(this);
endtask



/********************   Assignment    ********************/
function Assignment::new(Ident p1, Range_Expr_Opt p2, Expr p3);
  ident_ = p1;
  range_expr_opt_ = p2;
  expr_ = p3;

endfunction

task Assignment::accept(Visitor v);
  v.visitAssignment(this);
endtask



/********************   Break    ********************/
function Break::new();

endfunction

task Break::accept(Visitor v);
  v.visitBreak(this);
endtask



/********************   Continue    ********************/
function Continue::new();

endfunction

task Continue::accept(Visitor v);
  v.visitContinue(this);
endtask



/********************   Return    ********************/
function Return::new(Expr_Opt p1);
  expr_opt_ = p1;

endfunction

task Return::accept(Visitor v);
  v.visitReturn(this);
endtask



/********************   Call    ********************/
function Call::new(Ident p1, ListExpr p2);
  ident_ = p1;
  listexpr_ = p2;

endfunction

task Call::accept(Visitor v);
  v.visitCall(this);
endtask



/********************   Print    ********************/
function Print::new(ListPrint_Arg p1);
  listprint_arg_ = p1;

endfunction

task Print::accept(Visitor v);
  v.visitPrint(this);
endtask



/********************   RegWr    ********************/
function RegWr::new(Expr p1, Expr p2);
  expr_1 = p1;
  expr_2 = p2;

endfunction

task RegWr::accept(Visitor v);
  v.visitRegWr(this);
endtask



/********************   Wait    ********************/
function Wait::new(Expr p1);
  expr_ = p1;

endfunction

task Wait::accept(Visitor v);
  v.visitWait(this);
endtask



/********************   Fatal    ********************/
function Fatal::new(Expr p1);
  expr_ = p1;

endfunction

task Fatal::accept(Visitor v);
  v.visitFatal(this);
endtask



/********************   RegRd    ********************/
function RegRd::new(Expr p1);
  expr_ = p1;

endfunction

task RegRd::accept(Visitor v);
  v.visitRegRd(this);
endtask



/********************   WaitInterrupt    ********************/
function WaitInterrupt::new(ListExpr p1, Expr p2);
  listexpr_ = p1;
  expr_ = p2;

endfunction

task WaitInterrupt::accept(Visitor v);
  v.visitWaitInterrupt(this);
endtask



/********************   Ceil    ********************/
function Ceil::new(Expr p1);
  expr_ = p1;

endfunction

task Ceil::accept(Visitor v);
  v.visitCeil(this);
endtask



/********************   Floor    ********************/
function Floor::new(Expr p1);
  expr_ = p1;

endfunction

task Floor::accept(Visitor v);
  v.visitFloor(this);
endtask



/********************   Log2    ********************/
function Log2::new(Expr p1);
  expr_ = p1;

endfunction

task Log2::accept(Visitor v);
  v.visitLog2(this);
endtask



/********************   Sys    ********************/
function Sys::new(String_Literal p1);
  string_literal_ = p1;

endfunction

task Sys::accept(Visitor v);
  v.visitSys(this);
endtask



/********************   IsDefd    ********************/
function IsDefd::new(Ident p1);
  ident_ = p1;

endfunction

task IsDefd::accept(Visitor v);
  v.visitIsDefd(this);
endtask



/********************   PrExpr    ********************/
function PrExpr::new(Expr p1);
  expr_ = p1;

endfunction

task PrExpr::accept(Visitor v);
  v.visitPrExpr(this);
endtask



/********************   PrString    ********************/
function PrString::new(String_Literal p1);
  string_literal_ = p1;

endfunction

task PrString::accept(Visitor v);
  v.visitPrString(this);
endtask



/********************   PrHex    ********************/
function PrHex::new(Expr p1);
  expr_ = p1;

endfunction

task PrHex::accept(Visitor v);
  v.visitPrHex(this);
endtask



/********************   PrBin    ********************/
function PrBin::new(Expr p1);
  expr_ = p1;

endfunction

task PrBin::accept(Visitor v);
  v.visitPrBin(this);
endtask



/********************   ProcDef    ********************/
function ProcDef::new(Definition p1);
  definition_ = p1;

endfunction

task ProcDef::accept(Visitor v);
  v.visitProcDef(this);
endtask



/********************   FuncDef    ********************/
function FuncDef::new(Definition p1);
  definition_ = p1;

endfunction

task FuncDef::accept(Visitor v);
  v.visitFuncDef(this);
endtask



/********************   Defn    ********************/
function Defn::new(Ident p1, ListFormal_Arg p2, Stmt_Item p3);
  ident_ = p1;
  listformal_arg_ = p2;
  stmt_item_ = p3;

endfunction

task Defn::accept(Visitor v);
  v.visitDefn(this);
endtask



/********************   Formal    ********************/
function Formal::new(Ident p1);
  ident_ = p1;

endfunction

task Formal::accept(Visitor v);
  v.visitFormal(this);
endtask



/********************   ElsIf    ********************/
function ElsIf::new(Expr p1, Stmt_Item p2);
  expr_ = p1;
  stmt_item_ = p2;

endfunction

task ElsIf::accept(Visitor v);
  v.visitElsIf(this);
endtask



/********************   ElseIsEmpty    ********************/
function ElseIsEmpty::new();

endfunction

task ElseIsEmpty::accept(Visitor v);
  v.visitElseIsEmpty(this);
endtask



/********************   ElseIsElse    ********************/
function ElseIsElse::new(Stmt_Item p1);
  stmt_item_ = p1;

endfunction

task ElseIsElse::accept(Visitor v);
  v.visitElseIsElse(this);
endtask



/********************   If    ********************/
function If::new(Expr p1, Stmt_Item p2, ListElse_If p3, Else_Opt p4);
  expr_ = p1;
  stmt_item_ = p2;
  listelse_if_ = p3;
  else_opt_ = p4;

endfunction

task If::accept(Visitor v);
  v.visitIf(this);
endtask



/********************   While    ********************/
function While::new(Expr p1, Stmt_Item p2);
  expr_ = p1;
  stmt_item_ = p2;

endfunction

task While::accept(Visitor v);
  v.visitWhile(this);
endtask



/********************   For    ********************/
function For::new(For_Init_Opt p1, Expr_Opt p2, For_Step_Opt p3, Stmt_Item p4);
  for_init_opt_ = p1;
  expr_opt_ = p2;
  for_step_opt_ = p3;
  stmt_item_ = p4;

endfunction

task For::accept(Visitor v);
  v.visitFor(this);
endtask



/********************   ForInitIsEmpty    ********************/
function ForInitIsEmpty::new();

endfunction

task ForInitIsEmpty::accept(Visitor v);
  v.visitForInitIsEmpty(this);
endtask



/********************   ForInitIsInit    ********************/
function ForInitIsInit::new(Var_Assignment p1);
  var_assignment_ = p1;

endfunction

task ForInitIsInit::accept(Visitor v);
  v.visitForInitIsInit(this);
endtask



/********************   ForInitIsVarInit    ********************/
function ForInitIsVarInit::new(Var_Assignment p1);
  var_assignment_ = p1;

endfunction

task ForInitIsVarInit::accept(Visitor v);
  v.visitForInitIsVarInit(this);
endtask



/********************   ExprIsEmpty    ********************/
function ExprIsEmpty::new();

endfunction

task ExprIsEmpty::accept(Visitor v);
  v.visitExprIsEmpty(this);
endtask



/********************   ExprIsExpr    ********************/
function ExprIsExpr::new(Expr p1);
  expr_ = p1;

endfunction

task ExprIsExpr::accept(Visitor v);
  v.visitExprIsExpr(this);
endtask



/********************   ForStepIsEmpty    ********************/
function ForStepIsEmpty::new();

endfunction

task ForStepIsEmpty::accept(Visitor v);
  v.visitForStepIsEmpty(this);
endtask



/********************   ForStepIsAssignment    ********************/
function ForStepIsAssignment::new(Var_Assignment p1);
  var_assignment_ = p1;

endfunction

task ForStepIsAssignment::accept(Visitor v);
  v.visitForStepIsAssignment(this);
endtask



/********************   ForStepIsIncOrDec    ********************/
function ForStepIsIncOrDec::new(Ident p1, Inc_Or_Dec_Operator p2);
  ident_ = p1;
  inc_or_dec_operator_ = p2;

endfunction

task ForStepIsIncOrDec::accept(Visitor v);
  v.visitForStepIsIncOrDec(this);
endtask



/********************   Pow    ********************/
function Pow::new();

endfunction

task Pow::accept(Visitor v);
  v.visitPow(this);
endtask



/********************   Mul    ********************/
function Mul::new();

endfunction

task Mul::accept(Visitor v);
  v.visitMul(this);
endtask



/********************   Div    ********************/
function Div::new();

endfunction

task Div::accept(Visitor v);
  v.visitDiv(this);
endtask



/********************   Mod    ********************/
function Mod::new();

endfunction

task Mod::accept(Visitor v);
  v.visitMod(this);
endtask



/********************   Add    ********************/
function Add::new();

endfunction

task Add::accept(Visitor v);
  v.visitAdd(this);
endtask



/********************   Sub    ********************/
function Sub::new();

endfunction

task Sub::accept(Visitor v);
  v.visitSub(this);
endtask



/********************   LAnd    ********************/
function LAnd::new();

endfunction

task LAnd::accept(Visitor v);
  v.visitLAnd(this);
endtask



/********************   Xor    ********************/
function Xor::new();

endfunction

task Xor::accept(Visitor v);
  v.visitXor(this);
endtask



/********************   LOr    ********************/
function LOr::new();

endfunction

task LOr::accept(Visitor v);
  v.visitLOr(this);
endtask



/********************   Rsh    ********************/
function Rsh::new();

endfunction

task Rsh::accept(Visitor v);
  v.visitRsh(this);
endtask



/********************   Lsh    ********************/
function Lsh::new();

endfunction

task Lsh::accept(Visitor v);
  v.visitLsh(this);
endtask



/********************   Lt    ********************/
function Lt::new();

endfunction

task Lt::accept(Visitor v);
  v.visitLt(this);
endtask



/********************   Leq    ********************/
function Leq::new();

endfunction

task Leq::accept(Visitor v);
  v.visitLeq(this);
endtask



/********************   Gt    ********************/
function Gt::new();

endfunction

task Gt::accept(Visitor v);
  v.visitGt(this);
endtask



/********************   Geq    ********************/
function Geq::new();

endfunction

task Geq::accept(Visitor v);
  v.visitGeq(this);
endtask



/********************   Eq    ********************/
function Eq::new();

endfunction

task Eq::accept(Visitor v);
  v.visitEq(this);
endtask



/********************   Neq    ********************/
function Neq::new();

endfunction

task Neq::accept(Visitor v);
  v.visitNeq(this);
endtask



/********************   And    ********************/
function And::new();

endfunction

task And::accept(Visitor v);
  v.visitAnd(this);
endtask



/********************   Or    ********************/
function Or::new();

endfunction

task Or::accept(Visitor v);
  v.visitOr(this);
endtask



/********************   ExprPrim    ********************/
function ExprPrim::new(Primary p1);
  primary_ = p1;

endfunction

task ExprPrim::accept(Visitor v);
  v.visitExprPrim(this);
endtask



/********************   ExprUnary    ********************/
function ExprUnary::new(Unary_Operator p1, Expr p2);
  unary_operator_ = p1;
  expr_ = p2;

endfunction

task ExprUnary::accept(Visitor v);
  v.visitExprUnary(this);
endtask



/********************   ExprBltin    ********************/
function ExprBltin::new(Builtin_Fn p1);
  builtin_fn_ = p1;

endfunction

task ExprBltin::accept(Visitor v);
  v.visitExprBltin(this);
endtask



/********************   ExprFuncCall    ********************/
function ExprFuncCall::new(FuncOrProcCall p1);
  funcorproccall_ = p1;

endfunction

task ExprFuncCall::accept(Visitor v);
  v.visitExprFuncCall(this);
endtask



/********************   ExprTernary    ********************/
function ExprTernary::new(Expr p1, Expr p2, Expr p3);
  expr_1 = p1;
  expr_2 = p2;
  expr_3 = p3;

endfunction

task ExprTernary::accept(Visitor v);
  v.visitExprTernary(this);
endtask



/********************   EOp    ********************/
function EOp::new(Expr p1, Op p2, Expr p3);
  expr_1 = p1;
  op_ = p2;
  expr_2 = p3;

endfunction

task EOp::accept(Visitor v);
  v.visitEOp(this);
endtask



/********************   PrimIdent    ********************/
function PrimIdent::new(Ident p1, Range_Expr_Opt p2);
  ident_ = p1;
  range_expr_opt_ = p2;

endfunction

task PrimIdent::accept(Visitor v);
  v.visitPrimIdent(this);
endtask



/********************   PrimNumber    ********************/
function PrimNumber::new(Number p1);
  number_ = p1;

endfunction

task PrimNumber::accept(Visitor v);
  v.visitPrimNumber(this);
endtask



/********************   RangeExprIsEmpty    ********************/
function RangeExprIsEmpty::new();

endfunction

task RangeExprIsEmpty::accept(Visitor v);
  v.visitRangeExprIsEmpty(this);
endtask



/********************   RangeExprIsRange    ********************/
function RangeExprIsRange::new(Range_Expr p1);
  range_expr_ = p1;

endfunction

task RangeExprIsRange::accept(Visitor v);
  v.visitRangeExprIsRange(this);
endtask



/********************   RangeExprBit    ********************/
function RangeExprBit::new(Expr p1);
  expr_ = p1;

endfunction

task RangeExprBit::accept(Visitor v);
  v.visitRangeExprBit(this);
endtask



/********************   RangeExprRange    ********************/
function RangeExprRange::new(Expr p1, Expr p2);
  expr_1 = p1;
  expr_2 = p2;

endfunction

task RangeExprRange::accept(Visitor v);
  v.visitRangeExprRange(this);
endtask



/********************   UnaryPlus    ********************/
function UnaryPlus::new();

endfunction

task UnaryPlus::accept(Visitor v);
  v.visitUnaryPlus(this);
endtask



/********************   UnaryMinus    ********************/
function UnaryMinus::new();

endfunction

task UnaryMinus::accept(Visitor v);
  v.visitUnaryMinus(this);
endtask



/********************   UnaryNot    ********************/
function UnaryNot::new();

endfunction

task UnaryNot::accept(Visitor v);
  v.visitUnaryNot(this);
endtask



/********************   UnaryComp    ********************/
function UnaryComp::new();

endfunction

task UnaryComp::accept(Visitor v);
  v.visitUnaryComp(this);
endtask



/********************   Incr    ********************/
function Incr::new();

endfunction

task Incr::accept(Visitor v);
  v.visitIncr(this);
endtask



/********************   Decr    ********************/
function Decr::new();

endfunction

task Decr::accept(Visitor v);
  v.visitDecr(this);
endtask



/********************   Decimal    ********************/
function Decimal::new(Decimal_Number p1);
  decimal_number_ = p1;

endfunction

task Decimal::accept(Visitor v);
  v.visitDecimal(this);
endtask



/********************   Binary    ********************/
function Binary::new(BinaryNumber p1);
  binarynumber_ = p1;

endfunction

task Binary::accept(Visitor v);
  v.visitBinary(this);
endtask



/********************   Hex    ********************/
function Hex::new(HexNumber p1);
  hexnumber_ = p1;

endfunction

task Hex::accept(Visitor v);
  v.visitHex(this);
endtask



/********************   Real    ********************/
function Real::new(Real_Number p1);
  real_number_ = p1;

endfunction

task Real::accept(Visitor v);
  v.visitReal(this);
endtask



/********************   StringLit    ********************/
function StringLit::new(AnyChars p1);
  anychars_ = p1;

endfunction

task StringLit::accept(Visitor v);
  v.visitStringLit(this);
endtask




/********************   ListStmt_Item    ********************/

task ListStmt_Item::accept(Visitor v);
  v.visitListStmt_Item(this);
endtask



/********************   ListExpr    ********************/

task ListExpr::accept(Visitor v);
  v.visitListExpr(this);
endtask



/********************   ListPrint_Arg    ********************/

task ListPrint_Arg::accept(Visitor v);
  v.visitListPrint_Arg(this);
endtask



/********************   ListFormal_Arg    ********************/

task ListFormal_Arg::accept(Visitor v);
  v.visitListFormal_Arg(this);
endtask



/********************   ListElse_If    ********************/

task ListElse_If::accept(Visitor v);
  v.visitListElse_If(this);
endtask





`endif
