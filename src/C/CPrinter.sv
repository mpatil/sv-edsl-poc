/* -*- sv -*- File generated by the BNF Converter (bnfc 2.9.6). */

/*** Generated Pretty Printer and Abstract Syntax Viewer ***/

`include "C/CPrinter.svh"
`define INDENT_WIDTH 2


//You may wish to change render
task PrintAbsyn::render(string c);

  if (c == "{")
  begin
     bufAppend("\n");
     indent();
     bufAppend(c);
     _n_ = _n_ + `INDENT_WIDTH;
     bufAppend("\n");
     indent();
  end
  else if (c == "(" || c == "[")
     bufAppend(c);
  else if (c == ")" || c == "]")
  begin
     backup();
     bufAppend(c);
  end
  else if (c == "}")
  begin
     int t;
     _n_ = _n_ - `INDENT_WIDTH;
     for (t=0; t<`INDENT_WIDTH; t++) begin
       backup();
     end
     bufAppend(c);
     bufAppend("\n");
     indent();
  end
  else if (c == ",")
  begin
     backup();
     bufAppend(c);
     bufAppend(" ");
  end
  else if (c == ";")
  begin
     backup();
     bufAppend(c);
     bufAppend("\n");
     indent();
  end
  else if (c == " ") bufAppend(c);
  else if (c == 0) return;
  else
  begin
     bufAppend(" ");
     bufAppend(c);
     bufAppend(" ");
  end
endtask

task PrintAbsyn::render_s(string s);

  if(s.len() > 0)
  begin
    bufAppend(s);
    bufAppend(" ");
  end
endtask

task PrintAbsyn::indent();

  int n = _n_;
  while (n > 0)
  begin
    bufAppend(" ");
    n--;
  end
endtask

task PrintAbsyn::backup();
/*
  if (buf_[cur_ - 1] == " ")
  begin
    buf_[cur_ - 1] = 0;
    cur_--;
  end
*/
endtask

function PrintAbsyn::new();

  _i_ = 0; _n_ = 0;
  buf_ = "";
endfunction

task PrintAbsyn::print(Visitable v);

  _i_ = 0; _n_ = 0;
  buf_="";
  v.accept(this);
endtask

task PrintAbsyn::visitProgram(Program p); endtask //abstract class

task PrintAbsyn::visitProgram1(Program1  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; visitListStmt_Item(p.liststmt_item_);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitListStmt_Item(ListStmt_Item liststmt_item);

  iterListStmt_Item(liststmt_item, 0, liststmt_item.v.size());
endtask

task PrintAbsyn::iterListStmt_Item(ListStmt_Item l, int i, int j);

  if (i == j) return;
  begin /* cons */
    l.v[i].accept(this); iterListStmt_Item(l, i+1, j);
  end
endtask

task PrintAbsyn::visitStmt_Item(Stmt_Item p); endtask //abstract class

task PrintAbsyn::visitVarDeclStmt(VarDeclStmt  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("var");

  visitIdent(p.ident_);

  render(";");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitVarAssDeclStmt(VarAssDeclStmt  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("var");

  _i_ = 0; p.var_assignment_.accept(this);
  render(";");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitAssignmentStmt(AssignmentStmt  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.var_assignment_.accept(this);
  render(";");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitConditionalStmt(ConditionalStmt  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.conditional_stmt_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitIncDecOpStmt(IncDecOpStmt  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitIdent(p.ident_);

  _i_ = 0; p.inc_or_dec_operator_.accept(this);
  render(";");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitLoopStmt(LoopStmt  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.loop_stmt_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitJumpStmt(JumpStmt  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.jump_stmt_.accept(this);
  render(";");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitBlockStmt(BlockStmt  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("{");

  _i_ = 0; visitListStmt_Item(p.liststmt_item_);
  render("}");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitBuiltInStmt(BuiltInStmt  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.builtin_task_.accept(this);
  render(";");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitProcDefStmt(ProcDefStmt  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.proc_definition_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitFuncDefStmt(FuncDefStmt  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.func_definition_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitProcCallStmt(ProcCallStmt  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.funcorproccall_.accept(this);
  render(";");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitListExpr(ListExpr listexpr);

  iterListExpr(listexpr, 0, listexpr.v.size());
endtask

task PrintAbsyn::iterListExpr(ListExpr l, int i, int j);

  if (i == j) return;
  if (i == j-1)
  begin /* last */
    l.v[i].accept(this);
  end
  else
  begin /* cons */
    l.v[i].accept(this); render(","); iterListExpr(l, i+1, j);
  end
endtask

task PrintAbsyn::visitVar_Assignment(Var_Assignment p); endtask //abstract class

task PrintAbsyn::visitAssignment(Assignment  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitIdent(p.ident_);

  _i_ = 0; p.range_expr_opt_.accept(this);
  render("=");

  _i_ = 0; p.expr_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitJump_Stmt(Jump_Stmt p); endtask //abstract class

task PrintAbsyn::visitBreak(Break  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("break");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitContinue(Continue  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("continue");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitReturn(Return  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("return");

  _i_ = 0; p.expr_opt_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitFuncOrProcCall(FuncOrProcCall p); endtask //abstract class

task PrintAbsyn::visitCall(Call  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitIdent(p.ident_);

  render("(");

  _i_ = 0; visitListExpr(p.listexpr_);
  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitBuiltin_Task(Builtin_Task p); endtask //abstract class

task PrintAbsyn::visitPrint(Print  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("print");

  render("(");

  _i_ = 0; visitListPrint_Arg(p.listprint_arg_);
  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitRegWr(RegWr  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("regwr");

  render("(");

  _i_ = 0; p.expr_1.accept(this);
  render(",");

  _i_ = 0; p.expr_2.accept(this);
  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitWait(Wait  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("wait");

  render("(");

  _i_ = 0; p.expr_.accept(this);
  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitFatal(Fatal  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("fatal");

  render("(");

  _i_ = 0; p.expr_.accept(this);
  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitBuiltin_Fn(Builtin_Fn p); endtask //abstract class

task PrintAbsyn::visitRegRd(RegRd  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("regrd");

  render("(");

  _i_ = 0; p.expr_.accept(this);
  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitCeil(Ceil  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("ceil");

  render("(");

  _i_ = 0; p.expr_.accept(this);
  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitFloor(Floor  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("floor");

  render("(");

  _i_ = 0; p.expr_.accept(this);
  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitLog2(Log2  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("log2");

  render("(");

  _i_ = 0; p.expr_.accept(this);
  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitSys(Sys  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("sys");

  render("(");

  _i_ = 0; p.string_literal_.accept(this);
  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitIsDefd(IsDefd  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("defined");

  render("(");

  visitIdent(p.ident_);

  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitPrint_Arg(Print_Arg p); endtask //abstract class

task PrintAbsyn::visitPrExpr(PrExpr  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.expr_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitPrString(PrString  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.string_literal_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitPrHex(PrHex  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("hex");

  render("(");

  _i_ = 0; p.expr_.accept(this);
  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitPrBin(PrBin  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("bin");

  render("(");

  _i_ = 0; p.expr_.accept(this);
  render(")");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitListPrint_Arg(ListPrint_Arg listprint_arg);

  iterListPrint_Arg(listprint_arg, 0, listprint_arg.v.size());
endtask

task PrintAbsyn::iterListPrint_Arg(ListPrint_Arg l, int i, int j);

  if (i == j) return;
  if (i == j-1)
  begin /* last */
    l.v[i].accept(this);
  end
  else
  begin /* cons */
    l.v[i].accept(this); render(","); iterListPrint_Arg(l, i+1, j);
  end
endtask

task PrintAbsyn::visitProc_Definition(Proc_Definition p); endtask //abstract class

task PrintAbsyn::visitProcDef(ProcDef  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("procedure");

  _i_ = 0; p.definition_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitFunc_Definition(Func_Definition p); endtask //abstract class

task PrintAbsyn::visitFuncDef(FuncDef  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("function");

  _i_ = 0; p.definition_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitDefinition(Definition p); endtask //abstract class

task PrintAbsyn::visitDefn(Defn  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitIdent(p.ident_);

  render("(");

  _i_ = 0; visitListFormal_Arg(p.listformal_arg_);
  render(")");

  _i_ = 0; p.stmt_item_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitFormal_Arg(Formal_Arg p); endtask //abstract class

task PrintAbsyn::visitFormal(Formal  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitIdent(p.ident_);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitListFormal_Arg(ListFormal_Arg listformal_arg);

  iterListFormal_Arg(listformal_arg, 0, listformal_arg.v.size());
endtask

task PrintAbsyn::iterListFormal_Arg(ListFormal_Arg l, int i, int j);

  if (i == j) return;
  if (i == j-1)
  begin /* last */
    l.v[i].accept(this);
  end
  else
  begin /* cons */
    l.v[i].accept(this); render(","); iterListFormal_Arg(l, i+1, j);
  end
endtask

task PrintAbsyn::visitElse_If(Else_If p); endtask //abstract class

task PrintAbsyn::visitElsIf(ElsIf  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("elsif");

  render("(");

  _i_ = 0; p.expr_.accept(this);
  render(")");

  _i_ = 0; p.stmt_item_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitListElse_If(ListElse_If listelse_if);

  iterListElse_If(listelse_if, 0, listelse_if.v.size());
endtask

task PrintAbsyn::iterListElse_If(ListElse_If l, int i, int j);

  if (i == j) return;
  begin /* cons */
    l.v[i].accept(this); iterListElse_If(l, i+1, j);
  end
endtask

task PrintAbsyn::visitElse_Opt(Else_Opt p); endtask //abstract class

task PrintAbsyn::visitElseIsEmpty(ElseIsEmpty  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitElseIsElse(ElseIsElse  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("else");

  _i_ = 0; p.stmt_item_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitConditional_Stmt(Conditional_Stmt p); endtask //abstract class

task PrintAbsyn::visitIf(If  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("if");

  render("(");

  _i_ = 0; p.expr_.accept(this);
  render(")");

  _i_ = 0; p.stmt_item_.accept(this);
  _i_ = 0; visitListElse_If(p.listelse_if_);
  _i_ = 0; p.else_opt_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitLoop_Stmt(Loop_Stmt p); endtask //abstract class

task PrintAbsyn::visitWhile(While  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("while");

  render("(");

  _i_ = 0; p.expr_.accept(this);
  render(")");

  _i_ = 0; p.stmt_item_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitFor(For  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("for");

  render("(");

  _i_ = 0; p.for_init_opt_.accept(this);
  render(";");

  _i_ = 0; p.expr_opt_.accept(this);
  render(";");

  _i_ = 0; p.for_step_opt_.accept(this);
  render(")");

  _i_ = 0; p.stmt_item_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitFor_Init_Opt(For_Init_Opt p); endtask //abstract class

task PrintAbsyn::visitForInitIsEmpty(ForInitIsEmpty  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitForInitIsInit(ForInitIsInit  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.var_assignment_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitForInitIsVarInit(ForInitIsVarInit  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("var");

  _i_ = 0; p.var_assignment_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitExpr_Opt(Expr_Opt p); endtask //abstract class

task PrintAbsyn::visitExprIsEmpty(ExprIsEmpty  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitExprIsExpr(ExprIsExpr  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.expr_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitFor_Step_Opt(For_Step_Opt p); endtask //abstract class

task PrintAbsyn::visitForStepIsEmpty(ForStepIsEmpty  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitForStepIsAssignment(ForStepIsAssignment  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.var_assignment_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitForStepIsIncOrDec(ForStepIsIncOrDec  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitIdent(p.ident_);

  _i_ = 0; p.inc_or_dec_operator_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitOp(Op p); endtask //abstract class

task PrintAbsyn::visitPow(Pow  p);

  int oldi = _i_;
  if (oldi > 7) render(`_L_PAREN);

  render("**");


  if (oldi > 7) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitMul(Mul  p);

  int oldi = _i_;
  if (oldi > 6) render(`_L_PAREN);

  render("*");


  if (oldi > 6) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitDiv(Div  p);

  int oldi = _i_;
  if (oldi > 6) render(`_L_PAREN);

  render("/");


  if (oldi > 6) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitMod(Mod  p);

  int oldi = _i_;
  if (oldi > 6) render(`_L_PAREN);

  render("%");


  if (oldi > 6) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitAdd(Add  p);

  int oldi = _i_;
  if (oldi > 5) render(`_L_PAREN);

  render("+");


  if (oldi > 5) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitSub(Sub  p);

  int oldi = _i_;
  if (oldi > 5) render(`_L_PAREN);

  render("-");


  if (oldi > 5) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitLAnd(LAnd  p);

  int oldi = _i_;
  if (oldi > 4) render(`_L_PAREN);

  render("&");


  if (oldi > 4) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitXor(Xor  p);

  int oldi = _i_;
  if (oldi > 4) render(`_L_PAREN);

  render("^");


  if (oldi > 4) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitLOr(LOr  p);

  int oldi = _i_;
  if (oldi > 4) render(`_L_PAREN);

  render("|");


  if (oldi > 4) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitRsh(Rsh  p);

  int oldi = _i_;
  if (oldi > 3) render(`_L_PAREN);

  render(">>");


  if (oldi > 3) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitLsh(Lsh  p);

  int oldi = _i_;
  if (oldi > 3) render(`_L_PAREN);

  render("<<");


  if (oldi > 3) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitLt(Lt  p);

  int oldi = _i_;
  if (oldi > 2) render(`_L_PAREN);

  render("<");


  if (oldi > 2) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitLeq(Leq  p);

  int oldi = _i_;
  if (oldi > 2) render(`_L_PAREN);

  render("<=");


  if (oldi > 2) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitGt(Gt  p);

  int oldi = _i_;
  if (oldi > 2) render(`_L_PAREN);

  render(">");


  if (oldi > 2) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitGeq(Geq  p);

  int oldi = _i_;
  if (oldi > 2) render(`_L_PAREN);

  render(">=");


  if (oldi > 2) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitEq(Eq  p);

  int oldi = _i_;
  if (oldi > 2) render(`_L_PAREN);

  render("==");


  if (oldi > 2) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitNeq(Neq  p);

  int oldi = _i_;
  if (oldi > 2) render(`_L_PAREN);

  render("!=");


  if (oldi > 2) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitAnd(And  p);

  int oldi = _i_;
  if (oldi > 1) render(`_L_PAREN);

  render("&&");


  if (oldi > 1) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitOr(Or  p);

  int oldi = _i_;
  if (oldi > 1) render(`_L_PAREN);

  render("||");


  if (oldi > 1) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitExpr(Expr p); endtask //abstract class

task PrintAbsyn::visitExprPrim(ExprPrim  p);

  int oldi = _i_;
  if (oldi > 9) render(`_L_PAREN);

  _i_ = 0; p.primary_.accept(this);

  if (oldi > 9) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitExprUnary(ExprUnary  p);

  int oldi = _i_;
  if (oldi > 8) render(`_L_PAREN);

  _i_ = 0; p.unary_operator_.accept(this);
  _i_ = 9; p.expr_.accept(this);

  if (oldi > 8) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitExprBltin(ExprBltin  p);

  int oldi = _i_;
  if (oldi > 8) render(`_L_PAREN);

  _i_ = 0; p.builtin_fn_.accept(this);

  if (oldi > 8) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitExprFuncCall(ExprFuncCall  p);

  int oldi = _i_;
  if (oldi > 8) render(`_L_PAREN);

  _i_ = 0; p.funcorproccall_.accept(this);

  if (oldi > 8) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitExprTernary(ExprTernary  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.expr_1.accept(this);
  render("?");

  _i_ = 1; p.expr_2.accept(this);
  render(":");

  _i_ = 1; p.expr_3.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitEOp(EOp  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 9; p.expr_1.accept(this);
  _i_ = 0; p.op_.accept(this);
  _i_ = 9; p.expr_2.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitPrimary(Primary p); endtask //abstract class

task PrintAbsyn::visitPrimIdent(PrimIdent  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitIdent(p.ident_);

  _i_ = 0; p.range_expr_opt_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitPrimNumber(PrimNumber  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.number_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitRange_Expr_Opt(Range_Expr_Opt p); endtask //abstract class

task PrintAbsyn::visitRangeExprIsEmpty(RangeExprIsEmpty  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitRangeExprIsRange(RangeExprIsRange  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("[");

  _i_ = 0; p.range_expr_.accept(this);
  render("]");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitRange_Expr(Range_Expr p); endtask //abstract class

task PrintAbsyn::visitRangeExprBit(RangeExprBit  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.expr_.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitRangeExprRange(RangeExprRange  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  _i_ = 0; p.expr_1.accept(this);
  render(":");

  _i_ = 0; p.expr_2.accept(this);

  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitUnary_Operator(Unary_Operator p); endtask //abstract class

task PrintAbsyn::visitUnaryPlus(UnaryPlus  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("+");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitUnaryMinus(UnaryMinus  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("-");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitUnaryNot(UnaryNot  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("!");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitUnaryComp(UnaryComp  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("~");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitInc_Or_Dec_Operator(Inc_Or_Dec_Operator p); endtask //abstract class

task PrintAbsyn::visitIncr(Incr  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("++");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitDecr(Decr  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  render("--");


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitNumber(Number p); endtask //abstract class

task PrintAbsyn::visitDecimal(Decimal  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitDecimal_Number(p.decimal_number_);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitBinary(Binary  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitBinaryNumber(p.binarynumber_);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitHex(Hex  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitHexNumber(p.hexnumber_);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitReal(Real  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitReal_Number(p.real_number_);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitString_Literal(String_Literal p); endtask //abstract class

task PrintAbsyn::visitStringLit(StringLit  p);

  int oldi = _i_;
  if (oldi > 0) render(`_L_PAREN);

  visitAnyChars(p.anychars_);


  if (oldi > 0) render(`_R_PAREN);
  _i_ = oldi;
endtask

task PrintAbsyn::visitInteger(Integer x);

  string tmp = $psprintf("%d", x);
  bufAppend(tmp);
endtask

task PrintAbsyn::visitDouble(Double x);

  string tmp = $psprintf("%g", x);
  bufAppend(tmp);
endtask

task PrintAbsyn::visitChar(Char x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask

task PrintAbsyn::visitString(string x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask

task PrintAbsyn::visitIdent(string x);

  render(x);
endtask

task PrintAbsyn::visitDecimal_Number(Decimal_Number x);

  render(x);
endtask


task PrintAbsyn::visitReal_Number(Real_Number x);

  render(x);
endtask


task PrintAbsyn::visitBinaryNumber(BinaryNumber x);

  render(x);
endtask


task PrintAbsyn::visitHexNumber(HexNumber x);

  render(x);
endtask


task PrintAbsyn::visitAnyChars(AnyChars x);

  render(x);
endtask


function ShowAbsyn::new();
  buf_ = "";
endfunction


task ShowAbsyn::show(Visitable v);

  buf_="";
  v.accept(this);
endtask

task ShowAbsyn::visitProgram(Program p); endtask //abstract class

task ShowAbsyn::visitProgram1(Program1  p);

  bufAppend("(");
  bufAppend("Program1");
  bufAppend("\"");
  bufAppend("[");

  if (p.liststmt_item_)  p.liststmt_item_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitListStmt_Item(ListStmt_Item liststmt_item);

  for ( int i = 0; i < liststmt_item.v.size() ; i++)
  begin
    liststmt_item.v[i].accept(this);
    if (i != liststmt_item.v.size() - 1) bufAppend(", ");
  end
endtask
task ShowAbsyn::visitStmt_Item(Stmt_Item p); endtask //abstract class

task ShowAbsyn::visitVarDeclStmt(VarDeclStmt  p);

  bufAppend("(");
  bufAppend("VarDeclStmt");
  bufAppend("\"");
  visitIdent(p.ident_);

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitVarAssDeclStmt(VarAssDeclStmt  p);

  bufAppend("(");
  bufAppend("VarAssDeclStmt");
  bufAppend("\"");
  bufAppend("[");

  if (p.var_assignment_)  p.var_assignment_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitAssignmentStmt(AssignmentStmt  p);

  bufAppend("(");
  bufAppend("AssignmentStmt");
  bufAppend("\"");
  bufAppend("[");

  if (p.var_assignment_)  p.var_assignment_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitConditionalStmt(ConditionalStmt  p);

  bufAppend("(");
  bufAppend("ConditionalStmt");
  bufAppend("\"");
  bufAppend("[");

  if (p.conditional_stmt_)  p.conditional_stmt_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitIncDecOpStmt(IncDecOpStmt  p);

  bufAppend("(");
  bufAppend("IncDecOpStmt");
  bufAppend("\"");
  visitIdent(p.ident_);

  bufAppend(" ");
  bufAppend("[");

  if (p.inc_or_dec_operator_)  p.inc_or_dec_operator_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitLoopStmt(LoopStmt  p);

  bufAppend("(");
  bufAppend("LoopStmt");
  bufAppend("\"");
  bufAppend("[");

  if (p.loop_stmt_)  p.loop_stmt_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitJumpStmt(JumpStmt  p);

  bufAppend("(");
  bufAppend("JumpStmt");
  bufAppend("\"");
  bufAppend("[");

  if (p.jump_stmt_)  p.jump_stmt_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitBlockStmt(BlockStmt  p);

  bufAppend("(");
  bufAppend("BlockStmt");
  bufAppend("\"");
  bufAppend("[");

  if (p.liststmt_item_)  p.liststmt_item_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitBuiltInStmt(BuiltInStmt  p);

  bufAppend("(");
  bufAppend("BuiltInStmt");
  bufAppend("\"");
  bufAppend("[");

  if (p.builtin_task_)  p.builtin_task_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitProcDefStmt(ProcDefStmt  p);

  bufAppend("(");
  bufAppend("ProcDefStmt");
  bufAppend("\"");
  bufAppend("[");

  if (p.proc_definition_)  p.proc_definition_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitFuncDefStmt(FuncDefStmt  p);

  bufAppend("(");
  bufAppend("FuncDefStmt");
  bufAppend("\"");
  bufAppend("[");

  if (p.func_definition_)  p.func_definition_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitProcCallStmt(ProcCallStmt  p);

  bufAppend("(");
  bufAppend("ProcCallStmt");
  bufAppend("\"");
  bufAppend("[");

  if (p.funcorproccall_)  p.funcorproccall_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitListExpr(ListExpr listexpr);

  for ( int i = 0; i < listexpr.v.size() ; i++)
  begin
    listexpr.v[i].accept(this);
    if (i != listexpr.v.size() - 1) bufAppend(", ");
  end
endtask
task ShowAbsyn::visitVar_Assignment(Var_Assignment p); endtask //abstract class

task ShowAbsyn::visitAssignment(Assignment  p);

  bufAppend("(");
  bufAppend("Assignment");
  bufAppend("\"");
  visitIdent(p.ident_);

  bufAppend(" ");
  bufAppend("[");

  if (p.range_expr_opt_)  p.range_expr_opt_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitJump_Stmt(Jump_Stmt p); endtask //abstract class

task ShowAbsyn::visitBreak(Break  p);

  bufAppend("Break");
endtask
task ShowAbsyn::visitContinue(Continue  p);

  bufAppend("Continue");
endtask
task ShowAbsyn::visitReturn(Return  p);

  bufAppend("(");
  bufAppend("Return");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_opt_)  p.expr_opt_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitFuncOrProcCall(FuncOrProcCall p); endtask //abstract class

task ShowAbsyn::visitCall(Call  p);

  bufAppend("(");
  bufAppend("Call");
  bufAppend("\"");
  visitIdent(p.ident_);

  bufAppend(" ");
  bufAppend("[");

  if (p.listexpr_)  p.listexpr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitBuiltin_Task(Builtin_Task p); endtask //abstract class

task ShowAbsyn::visitPrint(Print  p);

  bufAppend("(");
  bufAppend("Print");
  bufAppend("\"");
  bufAppend("[");

  if (p.listprint_arg_)  p.listprint_arg_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitRegWr(RegWr  p);

  bufAppend("(");
  bufAppend("RegWr");
  bufAppend("\"");
  p.expr_1.accept(this);

  bufAppend(" ");
  p.expr_2.accept(this);

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitWait(Wait  p);

  bufAppend("(");
  bufAppend("Wait");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitFatal(Fatal  p);

  bufAppend("(");
  bufAppend("Fatal");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitBuiltin_Fn(Builtin_Fn p); endtask //abstract class

task ShowAbsyn::visitRegRd(RegRd  p);

  bufAppend("(");
  bufAppend("RegRd");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitCeil(Ceil  p);

  bufAppend("(");
  bufAppend("Ceil");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitFloor(Floor  p);

  bufAppend("(");
  bufAppend("Floor");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitLog2(Log2  p);

  bufAppend("(");
  bufAppend("Log2");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitSys(Sys  p);

  bufAppend("(");
  bufAppend("Sys");
  bufAppend("\"");
  bufAppend("[");

  if (p.string_literal_)  p.string_literal_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitIsDefd(IsDefd  p);

  bufAppend("(");
  bufAppend("IsDefd");
  bufAppend("\"");
  visitIdent(p.ident_);

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitPrint_Arg(Print_Arg p); endtask //abstract class

task ShowAbsyn::visitPrExpr(PrExpr  p);

  bufAppend("(");
  bufAppend("PrExpr");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitPrString(PrString  p);

  bufAppend("(");
  bufAppend("PrString");
  bufAppend("\"");
  bufAppend("[");

  if (p.string_literal_)  p.string_literal_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitPrHex(PrHex  p);

  bufAppend("(");
  bufAppend("PrHex");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitPrBin(PrBin  p);

  bufAppend("(");
  bufAppend("PrBin");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitListPrint_Arg(ListPrint_Arg listprint_arg);

  for ( int i = 0; i < listprint_arg.v.size() ; i++)
  begin
    listprint_arg.v[i].accept(this);
    if (i != listprint_arg.v.size() - 1) bufAppend(", ");
  end
endtask
task ShowAbsyn::visitProc_Definition(Proc_Definition p); endtask //abstract class

task ShowAbsyn::visitProcDef(ProcDef  p);

  bufAppend("(");
  bufAppend("ProcDef");
  bufAppend("\"");
  bufAppend("[");

  if (p.definition_)  p.definition_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitFunc_Definition(Func_Definition p); endtask //abstract class

task ShowAbsyn::visitFuncDef(FuncDef  p);

  bufAppend("(");
  bufAppend("FuncDef");
  bufAppend("\"");
  bufAppend("[");

  if (p.definition_)  p.definition_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitDefinition(Definition p); endtask //abstract class

task ShowAbsyn::visitDefn(Defn  p);

  bufAppend("(");
  bufAppend("Defn");
  bufAppend("\"");
  visitIdent(p.ident_);

  bufAppend(" ");
  bufAppend("[");

  if (p.listformal_arg_)  p.listformal_arg_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend("[");

  if (p.stmt_item_)  p.stmt_item_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitFormal_Arg(Formal_Arg p); endtask //abstract class

task ShowAbsyn::visitFormal(Formal  p);

  bufAppend("(");
  bufAppend("Formal");
  bufAppend("\"");
  visitIdent(p.ident_);

  bufAppend(")");
endtask
task ShowAbsyn::visitListFormal_Arg(ListFormal_Arg listformal_arg);

  for ( int i = 0; i < listformal_arg.v.size() ; i++)
  begin
    listformal_arg.v[i].accept(this);
    if (i != listformal_arg.v.size() - 1) bufAppend(", ");
  end
endtask
task ShowAbsyn::visitElse_If(Else_If p); endtask //abstract class

task ShowAbsyn::visitElsIf(ElsIf  p);

  bufAppend("(");
  bufAppend("ElsIf");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend("[");

  if (p.stmt_item_)  p.stmt_item_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitListElse_If(ListElse_If listelse_if);

  for ( int i = 0; i < listelse_if.v.size() ; i++)
  begin
    listelse_if.v[i].accept(this);
    if (i != listelse_if.v.size() - 1) bufAppend(", ");
  end
endtask
task ShowAbsyn::visitElse_Opt(Else_Opt p); endtask //abstract class

task ShowAbsyn::visitElseIsEmpty(ElseIsEmpty  p);

  bufAppend("ElseIsEmpty");
endtask
task ShowAbsyn::visitElseIsElse(ElseIsElse  p);

  bufAppend("(");
  bufAppend("ElseIsElse");
  bufAppend("\"");
  bufAppend("[");

  if (p.stmt_item_)  p.stmt_item_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitConditional_Stmt(Conditional_Stmt p); endtask //abstract class

task ShowAbsyn::visitIf(If  p);

  bufAppend("(");
  bufAppend("If");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend("[");

  if (p.stmt_item_)  p.stmt_item_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend("[");

  if (p.listelse_if_)  p.listelse_if_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend("[");

  if (p.else_opt_)  p.else_opt_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitLoop_Stmt(Loop_Stmt p); endtask //abstract class

task ShowAbsyn::visitWhile(While  p);

  bufAppend("(");
  bufAppend("While");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend("[");

  if (p.stmt_item_)  p.stmt_item_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitFor(For  p);

  bufAppend("(");
  bufAppend("For");
  bufAppend("\"");
  bufAppend("[");

  if (p.for_init_opt_)  p.for_init_opt_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend("[");

  if (p.expr_opt_)  p.expr_opt_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend("[");

  if (p.for_step_opt_)  p.for_step_opt_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend("[");

  if (p.stmt_item_)  p.stmt_item_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitFor_Init_Opt(For_Init_Opt p); endtask //abstract class

task ShowAbsyn::visitForInitIsEmpty(ForInitIsEmpty  p);

  bufAppend("ForInitIsEmpty");
endtask
task ShowAbsyn::visitForInitIsInit(ForInitIsInit  p);

  bufAppend("(");
  bufAppend("ForInitIsInit");
  bufAppend("\"");
  bufAppend("[");

  if (p.var_assignment_)  p.var_assignment_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitForInitIsVarInit(ForInitIsVarInit  p);

  bufAppend("(");
  bufAppend("ForInitIsVarInit");
  bufAppend("\"");
  bufAppend("[");

  if (p.var_assignment_)  p.var_assignment_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitExpr_Opt(Expr_Opt p); endtask //abstract class

task ShowAbsyn::visitExprIsEmpty(ExprIsEmpty  p);

  bufAppend("ExprIsEmpty");
endtask
task ShowAbsyn::visitExprIsExpr(ExprIsExpr  p);

  bufAppend("(");
  bufAppend("ExprIsExpr");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitFor_Step_Opt(For_Step_Opt p); endtask //abstract class

task ShowAbsyn::visitForStepIsEmpty(ForStepIsEmpty  p);

  bufAppend("ForStepIsEmpty");
endtask
task ShowAbsyn::visitForStepIsAssignment(ForStepIsAssignment  p);

  bufAppend("(");
  bufAppend("ForStepIsAssignment");
  bufAppend("\"");
  bufAppend("[");

  if (p.var_assignment_)  p.var_assignment_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitForStepIsIncOrDec(ForStepIsIncOrDec  p);

  bufAppend("(");
  bufAppend("ForStepIsIncOrDec");
  bufAppend("\"");
  visitIdent(p.ident_);

  bufAppend(" ");
  bufAppend("[");

  if (p.inc_or_dec_operator_)  p.inc_or_dec_operator_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitOp(Op p); endtask //abstract class

task ShowAbsyn::visitPow(Pow  p);

  bufAppend("Pow");
endtask
task ShowAbsyn::visitMul(Mul  p);

  bufAppend("Mul");
endtask
task ShowAbsyn::visitDiv(Div  p);

  bufAppend("Div");
endtask
task ShowAbsyn::visitMod(Mod  p);

  bufAppend("Mod");
endtask
task ShowAbsyn::visitAdd(Add  p);

  bufAppend("Add");
endtask
task ShowAbsyn::visitSub(Sub  p);

  bufAppend("Sub");
endtask
task ShowAbsyn::visitLAnd(LAnd  p);

  bufAppend("LAnd");
endtask
task ShowAbsyn::visitXor(Xor  p);

  bufAppend("Xor");
endtask
task ShowAbsyn::visitLOr(LOr  p);

  bufAppend("LOr");
endtask
task ShowAbsyn::visitRsh(Rsh  p);

  bufAppend("Rsh");
endtask
task ShowAbsyn::visitLsh(Lsh  p);

  bufAppend("Lsh");
endtask
task ShowAbsyn::visitLt(Lt  p);

  bufAppend("Lt");
endtask
task ShowAbsyn::visitLeq(Leq  p);

  bufAppend("Leq");
endtask
task ShowAbsyn::visitGt(Gt  p);

  bufAppend("Gt");
endtask
task ShowAbsyn::visitGeq(Geq  p);

  bufAppend("Geq");
endtask
task ShowAbsyn::visitEq(Eq  p);

  bufAppend("Eq");
endtask
task ShowAbsyn::visitNeq(Neq  p);

  bufAppend("Neq");
endtask
task ShowAbsyn::visitAnd(And  p);

  bufAppend("And");
endtask
task ShowAbsyn::visitOr(Or  p);

  bufAppend("Or");
endtask
task ShowAbsyn::visitExpr(Expr p); endtask //abstract class

task ShowAbsyn::visitExprPrim(ExprPrim  p);

  bufAppend("(");
  bufAppend("ExprPrim");
  bufAppend("\"");
  bufAppend("[");

  if (p.primary_)  p.primary_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitExprUnary(ExprUnary  p);

  bufAppend("(");
  bufAppend("ExprUnary");
  bufAppend("\"");
  bufAppend("[");

  if (p.unary_operator_)  p.unary_operator_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitExprBltin(ExprBltin  p);

  bufAppend("(");
  bufAppend("ExprBltin");
  bufAppend("\"");
  bufAppend("[");

  if (p.builtin_fn_)  p.builtin_fn_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitExprFuncCall(ExprFuncCall  p);

  bufAppend("(");
  bufAppend("ExprFuncCall");
  bufAppend("\"");
  bufAppend("[");

  if (p.funcorproccall_)  p.funcorproccall_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitExprTernary(ExprTernary  p);

  bufAppend("(");
  bufAppend("ExprTernary");
  bufAppend("\"");
  p.expr_1.accept(this);

  bufAppend(" ");
  p.expr_2.accept(this);

  bufAppend(" ");
  p.expr_3.accept(this);

  bufAppend(")");
endtask
task ShowAbsyn::visitEOp(EOp  p);

  bufAppend("(");
  bufAppend("EOp");
  bufAppend("\"");
  p.expr_1.accept(this);

  bufAppend(" ");
  bufAppend("[");

  if (p.op_)  p.op_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  p.expr_2.accept(this);

  bufAppend(")");
endtask
task ShowAbsyn::visitPrimary(Primary p); endtask //abstract class

task ShowAbsyn::visitPrimIdent(PrimIdent  p);

  bufAppend("(");
  bufAppend("PrimIdent");
  bufAppend("\"");
  visitIdent(p.ident_);

  bufAppend(" ");
  bufAppend("[");

  if (p.range_expr_opt_)  p.range_expr_opt_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitPrimNumber(PrimNumber  p);

  bufAppend("(");
  bufAppend("PrimNumber");
  bufAppend("\"");
  bufAppend("[");

  if (p.number_)  p.number_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitRange_Expr_Opt(Range_Expr_Opt p); endtask //abstract class

task ShowAbsyn::visitRangeExprIsEmpty(RangeExprIsEmpty  p);

  bufAppend("RangeExprIsEmpty");
endtask
task ShowAbsyn::visitRangeExprIsRange(RangeExprIsRange  p);

  bufAppend("(");
  bufAppend("RangeExprIsRange");
  bufAppend("\"");
  bufAppend("[");

  if (p.range_expr_)  p.range_expr_.accept(this);

  bufAppend("]");

  bufAppend(" ");
  bufAppend(")");
endtask
task ShowAbsyn::visitRange_Expr(Range_Expr p); endtask //abstract class

task ShowAbsyn::visitRangeExprBit(RangeExprBit  p);

  bufAppend("(");
  bufAppend("RangeExprBit");
  bufAppend("\"");
  bufAppend("[");

  if (p.expr_)  p.expr_.accept(this);

  bufAppend("]");

  bufAppend(")");
endtask
task ShowAbsyn::visitRangeExprRange(RangeExprRange  p);

  bufAppend("(");
  bufAppend("RangeExprRange");
  bufAppend("\"");
  p.expr_1.accept(this);

  bufAppend(" ");
  p.expr_2.accept(this);

  bufAppend(")");
endtask
task ShowAbsyn::visitUnary_Operator(Unary_Operator p); endtask //abstract class

task ShowAbsyn::visitUnaryPlus(UnaryPlus  p);

  bufAppend("UnaryPlus");
endtask
task ShowAbsyn::visitUnaryMinus(UnaryMinus  p);

  bufAppend("UnaryMinus");
endtask
task ShowAbsyn::visitUnaryNot(UnaryNot  p);

  bufAppend("UnaryNot");
endtask
task ShowAbsyn::visitUnaryComp(UnaryComp  p);

  bufAppend("UnaryComp");
endtask
task ShowAbsyn::visitInc_Or_Dec_Operator(Inc_Or_Dec_Operator p); endtask //abstract class

task ShowAbsyn::visitIncr(Incr  p);

  bufAppend("Incr");
endtask
task ShowAbsyn::visitDecr(Decr  p);

  bufAppend("Decr");
endtask
task ShowAbsyn::visitNumber(Number p); endtask //abstract class

task ShowAbsyn::visitDecimal(Decimal  p);

  bufAppend("(");
  bufAppend("Decimal");
  bufAppend("\"");
  visitDecimal_Number(p.decimal_number_);

  bufAppend(")");
endtask
task ShowAbsyn::visitBinary(Binary  p);

  bufAppend("(");
  bufAppend("Binary");
  bufAppend("\"");
  visitBinaryNumber(p.binarynumber_);

  bufAppend(")");
endtask
task ShowAbsyn::visitHex(Hex  p);

  bufAppend("(");
  bufAppend("Hex");
  bufAppend("\"");
  visitHexNumber(p.hexnumber_);

  bufAppend(")");
endtask
task ShowAbsyn::visitReal(Real  p);

  bufAppend("(");
  bufAppend("Real");
  bufAppend("\"");
  visitReal_Number(p.real_number_);

  bufAppend(")");
endtask
task ShowAbsyn::visitString_Literal(String_Literal p); endtask //abstract class

task ShowAbsyn::visitStringLit(StringLit  p);

  bufAppend("(");
  bufAppend("StringLit");
  bufAppend("\"");
  visitAnyChars(p.anychars_);

  bufAppend(")");
endtask
task ShowAbsyn::visitInteger(Integer x);

  string tmp = $psprintf("%d", x);
  bufAppend(tmp);
endtask

task ShowAbsyn::visitDouble(Double x);
  string tmp = $psprintf("%g", x);
  bufAppend(tmp);
endtask

task ShowAbsyn::visitChar(Char x);
  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask

task ShowAbsyn::visitString(string x);
  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask

task ShowAbsyn::visitIdent(string x);
  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask

task ShowAbsyn::visitDecimal_Number(Decimal_Number x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask


task ShowAbsyn::visitReal_Number(Real_Number x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask


task ShowAbsyn::visitBinaryNumber(BinaryNumber x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask


task ShowAbsyn::visitHexNumber(HexNumber x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask


task ShowAbsyn::visitAnyChars(AnyChars x);

  bufAppend("\"");
  bufAppend(x);
  bufAppend("\"");
endtask



